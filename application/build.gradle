buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

apply plugin: 'com.android.application'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    defaultConfig {
        versionCode 16
        versionName '0.8'
        minSdkVersion 16
        targetSdkVersion 23
        jackOptions {
            enabled true
        }
    }

    dexOptions {
        incremental true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file("../application/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        // Notice the production keystore and password are not checked in. Signing resources for
        // release builds are typically stored somewhere more secure than the source repo.
        // This typically also means that release builds are signed manually rather than by
        // Gradle.
    }

    productFlavors {
        open {
            applicationId 'com.projectsexception.myapplist.open'
        }

        play {
            applicationId 'com.projectsexception.myapplist'
            if (project.hasProperty('myapplist.ga_tracking_id')) {
                buildConfigField 'String', 'TRACKING_ID', '"' + project.property('myapplist.ga_tracking_id') + '"'
            } else {
                buildConfigField 'String', 'TRACKING_ID', '"xxx"'
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
//        abortOnError false
    }

}

dependencies {
    compile (project (':dependencies:android-utils')) {
        exclude group: 'com.google.android'
    }

    // Google Play services split client libs.
    compile "com.google.android.gms:play-services-analytics:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-appindexing:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-auth:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-gcm:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-maps:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-plus:${google_play_services_client_library_version}"

    // Android support libraries.
    compile "com.android.support:appcompat-v7:${android_support_lib_version}"
    compile "com.android.support:cardview-v7:${android_support_lib_version}"
    compile "com.android.support:design:${android_support_lib_version}"
    compile "com.android.support:support-v13:${android_support_lib_version}"
    compile "com.android.support:recyclerview-v7:${android_support_lib_version}"
    compile "com.android.support:preference-v7:${android_support_lib_version}"


    // You must install or update the Support Repository through the SDK manager to use this dependency.
    compile ('com.github.manuelpeinado.multichoiceadapter:multichoiceadapter-abc:3.1.+') {
        exclude group: 'com.android.support'
    }
    compile 'de.keyboardsurfer.android.widget:crouton:1.8.+@aar'

    compile 'com.nineoldandroids:library:2.4.+'

    playCompile 'com.google.android.gms:play-services:5.0.+'
}

afterEvaluate { project ->
    android.applicationVariants.each { variant ->
        variant.javaCompile.dependsOn stripPlayServices
    }
}

task stripPlayServices << {
    def playServiceRootFolder = new File(rootProject.buildDir, "intermediates/exploded-aar/com.google.android.gms/play-services/")
    playServiceRootFolder.list().each { versionName ->
        def versionFolder = new File(playServiceRootFolder, versionName)
        copy {
            from(file(new File(versionFolder, "classes.jar")))
            into(file(versionFolder))
            rename { fileName ->
                fileName = "classes_orig.jar"
            }
        }
        tasks.create(name: "strip" + versionName, type: Jar) {
            destinationDir = versionFolder
            archiveName = "classes.jar"
            from(zipTree(new File(versionFolder, "classes_orig.jar"))) {
                exclude "com/google/ads/**"
                //exclude "com/google/android/gms/analytics/**"
                exclude "com/google/android/gms/games/**"
                exclude "com/google/android/gms/plus/**"
                exclude "com/google/android/gms/drive/**"
                //exclude "com/google/android/gms/ads/**"
            }
        }.execute()
        delete {
            delete(file(new File(versionFolder, "classes_orig.jar")))
        }
    }
}
